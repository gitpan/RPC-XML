RPC::XML - An implementation of XML-RPC

Version: 0.42

WHAT IS IT

The RPC::XML package is an implementation of XML-RPC. The module provides
classes for sample client and server implementations, a server designed as an
Apache location-handler, and a suite of data-manipulation classes that are
used by them.


USING RPC::XML

There are not any pre-packaged executables in this distribution (except for a
utility tool). Client usage will usually be along the lines of:

    use RPC::XML::Client;
    ...
    my $client = new RPC::XML::Client
        'http://www.oreillynet.com/meerkat/xml-rpc/server.php';
    my $req = RPC::XML::request->new('meerkat.getChannelsBySubstring', 'perl');
    my $res = $client->send_request($req);
    # This returns an object of the RPC::XML::response class. This double-call
    # of value() first gets a RPC::XML::* data object from the response, then
    # the actual data from it:
    my $value = $res->value->value;

Running a simple server is not much more involved:

    use RPC::XML::Server;
    ...
    my $srv = new RPC::XML::Server (host => 'localhost',
                                    port => 9000);
    # You would then use $srv->add_method to add some remotely-callable code
    ...
    $srv->accept_loop; # Stays in an accept/connect loop


BUILDING/INSTALLING

This package is set up to configure and build like a typical Perl extension.
To build:

        perl Makefile.PL
        make && make test

If RPC::XML passes all tests, then:

        make install

You may need super-user access to install.


PROBLEMS/BUG REPORTS

Please send any reports of problems or bugs to rjray@blackperl.com


SEE ALSO

XML-RPC:              http://www.xmlrpc.com/spec
The Artistic License: http://language.perl.com/misc/Artistic.html


CHANGES

Changed the test in Apache::RPC::Server of the Content-type header so
that it accepts a header that contains "text/xml", as opposed to only
accepting a header that exactly equalled that string. Allows for
things like SOAP::Lite's XMLRPC::Lite which include a charset in the
header.

time2iso8601() in the RPC::XML module now allows defaulting of the
$time argument to time() (which means no timezone specification).

Found a bug in RPC::XML::Parser where base64 data being parsed in a
request/response message wasn't being properly passed to the c'tor
for RPC::XML::base64. Reported by Chris Brierley.

Added a line in Apache::RPC::Server to set the Content-Type header
on HEAD responses. Apache won't take this from the usual header()
method, it has to be explicitly set with content_type().

Two of the tests in t/40_server.t could cause fatal errors since a
return value wasn't tested for ref-ness before having a method called
on it. Fixed.

Compress::Zlib-based compression is now supported in RPC::XML::Server,
RPC::XML::Client and Apache::RPC::Server. It should be compatible with
the XMLRPC::Lite package's compression.
