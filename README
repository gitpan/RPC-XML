RPC::XML - An implementation of XML-RPC

Version: 0.59

WHAT IS IT

The RPC::XML package is an implementation of XML-RPC. The module provides
classes for sample client and server implementations, a server designed as an
Apache location-handler, and a suite of data-manipulation classes that are
used by them.


USING RPC::XML

There are not any pre-packaged executables in this distribution (except for a
utility tool). Client usage will usually be along the lines of:

    use RPC::XML::Client;
    ...
    my $client = new RPC::XML::Client
        'http://www.oreillynet.com/meerkat/xml-rpc/server.php';
    my $req = RPC::XML::request->new('meerkat.getChannelsBySubstring', 'perl');
    my $res = $client->send_request($req);
    # This returns an object of the RPC::XML::response class. This double-call
    # of value() first gets a RPC::XML::* data object from the response, then
    # the actual data from it:
    my $value = $res->value->value;

Running a simple server is not much more involved:

    use RPC::XML::Server;
    ...
    my $srv = new RPC::XML::Server (host => 'localhost',
                                    port => 9000);
    # You would then use $srv->add_method to add some remotely-callable code
    ...
    $srv->accept_loop; # Stays in an accept/connect loop


BUILDING/INSTALLING

This package is set up to configure and build like a typical Perl extension.
To build:

        perl Makefile.PL
        make && make test

If RPC::XML passes all tests, then:

        make install

You may need super-user access to install.


PROBLEMS/BUG REPORTS

Please send any reports of problems or bugs to rjray@blackperl.com


SEE ALSO

XML-RPC:              http://www.xmlrpc.com/spec
The Artistic License: http://www.opensource.org/licenses/artistic-license.php


CHANGES

t/10_data.t:
Eliminated the source of some "Modification of a read-only value..."
errors. Patch from Juan Camacho.

t/01_pod.t (ADD):
t/02_pod_coverage.t (ADD):
Two new unit-test suites added; the first checks the validity of the
POD docs in each module (correctness tests), the other checks that POD
covers all the publically-visible API routines (coverage tests).

lib/Apache/RPC/Server.pm:
lib/Apache/RPC/Status.pm:
lib/RPC/XML/Function.pm:
lib/RPC/XML/Parser.pm:
lib/RPC/XML/Server.pm:
Fixes to POD documentation (and/or inline comments) as uncovered by
the added POD-oriented unit tests.

README.apache (DELETE):
MANIFEST:
The README.apache file is no longer relevant.

lib/Apache/RPC/Server.pm:
Fixed the logic around the setting of $no_def in new(); it was
handling the no_default method-argument backwards. Found by Eric
Cholet.

lib/RPC/XML.pm:
t/01_data.t:
Applied a patch from Jos Boumans to add flexibility to the
smart_encode() hack that tries to match bare Perl data to RPC classes.
At the same time, added documentation of the $ENCODE global variable
in the documentation.
