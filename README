RPC::XML - An implementation of XML-RPC

Version: 0.77

WHAT IS IT

The RPC::XML package is an implementation of XML-RPC. The module provides
classes for sample client and server implementations, a server designed as an
Apache location-handler, and a suite of data-manipulation classes that are
used by them.


USING RPC::XML

There are not any pre-packaged executables in this distribution (except for a
utility tool). Client usage will usually be along the lines of:

    use RPC::XML::Client;
    ...
    my $client = new RPC::XML::Client
        'http://www.oreillynet.com/meerkat/xml-rpc/server.php';
    my $req = RPC::XML::request->new('meerkat.getChannelsBySubstring', 'perl');
    my $res = $client->send_request($req);
    # This returns an object of the RPC::XML::response class. This double-call
    # of value() first gets a RPC::XML::* data object from the response, then
    # the actual data from it:
    my $value = $res->value->value;

Running a simple server is not much more involved:

    use RPC::XML::Server;
    ...
    my $srv = new RPC::XML::Server (host => 'localhost',
                                    port => 9000);
    # You would then use $srv->add_method to add some remotely-callable code
    ...
    $srv->accept_loop; # Stays in an accept/connect loop


BUILDING/INSTALLING

This package is set up to configure and build like a typical Perl extension.
To build:

        perl Makefile.PL
        make && make test

If RPC::XML passes all tests, then:

        make install

You may need super-user access to install.


PROBLEMS/BUG REPORTS

Please send any reports of problems or bugs to rjray@blackperl.com


SEE ALSO

XML-RPC:          http://www.xmlrpc.com/spec
The Artistic 2.0: http://www.opensource.org/licenses/artistic-license-2.0.php
The LGPL 2.1:     http://www.opensource.org/licenses/lgpl-2.1.php


CHANGES

* t/15_serialize.t
Fix a test failure on Windows.

* lib/RPC/XML.pm
RT #70408: Fix spelling error in man page, reported by Debian
group.

* t/90_rt54183_sigpipe.t
Fix to handle cases where server creation fails. Now skips the
tests rather than dying.

* lib/RPC/XML/Client.pm
RT #67486: Add port to Host header in client requests.

* lib/RPC/XML/Server.pm
RT #65341: Added "use" of forgotten library File::Temp. This
was causing failure when "message_file_thresh" kicked in.

* t/10_data.t
RT #78602: Changed 64-bit test from use64bitint to longsize. On
some systems (such as OS X), use64bitint can be true even when
in 32-bit mode.

* t/21_xml_libxml.t
Fix from Christian Walde, skip passed test on Windows.

* lib/RPC/XML/Server.pm
* t/40_server.t
Checkpoint refactoring and additional tests. Work is not
complete here, but the Net::Server changes demand immediate
attention

* t/20_xml_parser.t
RT #72780: Check for a possible parser failure. One instance of
XML::Parser failing to parse the extern entities test. Cannot
reproduce, so wrap it in a "skip" block for now.

* lib/RPC/XML/Procedure.pm
* t/30_method.t
RT #71452: Correct handling of dateTime parameters. Existing
code in lib/RPC/XML/Procedure.pm did not properly handle
parameters of the dateTime.iso8601 type. Also, there were no
tests for these.

* MANIFEST
* t/30_method.t (deleted)
* t/30_proceudre.t (added)
Renamed t/30_method.t to t/30_procedure.t.

* lib/RPC/XML/Server.pm
RT #77992: Make RPC::XML::Server work with Net::Server again,
after the API changes of Net::Server 2.x.
