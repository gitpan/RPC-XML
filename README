RPC::XML - An implementation of XML-RPC

Version: 0.74

WHAT IS IT

The RPC::XML package is an implementation of XML-RPC. The module provides
classes for sample client and server implementations, a server designed as an
Apache location-handler, and a suite of data-manipulation classes that are
used by them.


USING RPC::XML

There are not any pre-packaged executables in this distribution (except for a
utility tool). Client usage will usually be along the lines of:

    use RPC::XML::Client;
    ...
    my $client = new RPC::XML::Client
        'http://www.oreillynet.com/meerkat/xml-rpc/server.php';
    my $req = RPC::XML::request->new('meerkat.getChannelsBySubstring', 'perl');
    my $res = $client->send_request($req);
    # This returns an object of the RPC::XML::response class. This double-call
    # of value() first gets a RPC::XML::* data object from the response, then
    # the actual data from it:
    my $value = $res->value->value;

Running a simple server is not much more involved:

    use RPC::XML::Server;
    ...
    my $srv = new RPC::XML::Server (host => 'localhost',
                                    port => 9000);
    # You would then use $srv->add_method to add some remotely-callable code
    ...
    $srv->accept_loop; # Stays in an accept/connect loop


BUILDING/INSTALLING

This package is set up to configure and build like a typical Perl extension.
To build:

        perl Makefile.PL
        make && make test

If RPC::XML passes all tests, then:

        make install

You may need super-user access to install.


PROBLEMS/BUG REPORTS

Please send any reports of problems or bugs to rjray@blackperl.com


SEE ALSO

XML-RPC:          http://www.xmlrpc.com/spec
The Artistic 2.0: http://www.opensource.org/licenses/artistic-license-2.0.php
The LGPL 2.1:     http://www.opensource.org/licenses/lgpl-2.1.php


CHANGES

* t/90_rt54183_sigpipe.t
RT #56800: Make this suite skip all tests on Windows platforms.

* lib/Apache/RPC/Server.pm
Clean up some run-time "use of undefined value" messages.

* lib/RPC/XML/Parser/XMLLibXML.pm
* lib/RPC/XML/Parser/XMLParser.pm
* t/90_rt58323_push_parser.t (added)
RT #58323: Started as making the parser interfaces correctly
report errors when passed null-length strings or "0" values.
Turned out that the error return interface from XMLLibXML.pm
was not consistent with the rest of the system, so fixed that
as well.

* lib/RPC/XML/Server.pm
* t/40_server.t
RT #58240: Applied a patch from Martijn van de Streek that adds
access to the HTTP::Request object to called method code.

* lib/RPC/XML.pm
* lib/RPC/XML/Parser/XMLLibXML.pm
* lib/RPC/XML/Parser/XMLParser.pm
* t/90_rt58065_allow_nil.t (added)
RT #58065: Allow the parsing of <nil /> tags when they are
encountered, even if $RPC::XML::ALLOW_NIL is not set. Only
limit the generation of these tags.

* lib/RPC/XML/Server.pm
* t/41_server_hang.t
This test sporadically fails, so enhance the error message for
more info. Also alter the test slightly, hoping it fixes the
random failures.

* etc/make_method
Applied perlcritic to the make_method tool.

* lib/XML/RPC.pm
* t/10_data.t
* t/20_xml_parser.t
* t/21_xml_libxml.t
RT #62916: Previous adjustments to the dateTime.iso8601
stringification caused it to no longer fit the XML-RPC spec.
Fixed.

* lib/RPC/XML.pm
* lib/RPC/XML/Client.pm
* lib/RPC/XML/Parser/XMLParser.pm
* lib/RPC/XML/ParserFactory.pm
* lib/RPC/XML/Server.pm
Used warnings::unused to find unused variables not found by
Perl::Critic.

* t/10_data.t
Realized I had no boundary-tests for ints in smart_encode().
This revealed some problems with i8 values on my 32-bit system.
Don't want to introduce dependency on BigInt right now, so
marked those tests "TODO".
